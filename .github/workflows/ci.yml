name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  CUDA_VERSION: '12.2'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort pre-commit
        pip install -r requirements.txt
    
    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files
    
    - name: Code formatting with Black
      run: black --check --diff src/ tests/ scripts/
    
    - name: Import sorting with isort
      run: isort --check-only --diff src/ tests/ scripts/
    
    - name: Linting with flake8
      run: |
        flake8 src/ tests/ scripts/ \
          --max-line-length=120 \
          --ignore=E203,W503,E501 \
          --per-file-ignores="__init__.py:F401"
    
    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports \
          --no-strict-optional \
          --allow-untyped-decorators

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libhdf5-dev \
          libtbb-dev \
          redis-server
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
    
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        sudo systemctl status redis-server
    
    - name: Run unit tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          -x \
          --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: test_xauusd
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_xauusd
        REDIS_URL: redis://localhost:6379/0
        TEST_ENV: true
      run: |
        pytest tests/test_integration/ -v --tb=short
    
    - name: Performance benchmarks
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_xauusd
        REDIS_URL: redis://localhost:6379/0
      run: |
        python scripts/performance_monitor.py --benchmark

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Test
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and test Docker images
      run: |
        # Build all stages
        docker build --target development -t xauusd:dev .
        docker build --target production -t xauusd:prod .
        docker build --target trainer -t xauusd:trainer .
        docker build --target backtester -t xauusd:backtester .
        docker build --target live -t xauusd:live .
    
    - name: Test Docker images
      run: |
        # Test basic functionality
        docker run --rm xauusd:prod python -c "import src; print('Import successful')"
        docker run --rm xauusd:trainer python -c "from src.models import LightGBMModel; print('Model import successful')"
    
    - name: Push Docker images
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        docker tag xauusd:prod ${{ secrets.DOCKER_USERNAME }}/xauusd:latest
        docker tag xauusd:trainer ${{ secrets.DOCKER_USERNAME }}/xauusd:trainer
        docker tag xauusd:backtester ${{ secrets.DOCKER_USERNAME }}/xauusd:backtester
        docker tag xauusd:live ${{ secrets.DOCKER_USERNAME }}/xauusd:live
        
        docker push ${{ secrets.DOCKER_USERNAME }}/xauusd:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/xauusd:trainer
        docker push ${{ secrets.DOCKER_USERNAME }}/xauusd:backtester
        docker push ${{ secrets.DOCKER_USERNAME }}/xauusd:live

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: docker-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'xauusd:prod'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Python security scan with bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          bandit-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [integration-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.xauusd-trading.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
        echo "Deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [integration-tests, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://xauusd-trading.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
        echo "Production deployment completed"
    
    - name: Notify deployment
      if: always()
      run: |
        echo "Sending deployment notification..."
        # Add notification logic (Slack, email, etc.)